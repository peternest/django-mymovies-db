[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "django-mymovies-db"
version = "0.1.0"
description = "This is my pet project to keep track of my favorite movies and series. Powered by the Django web framework."
authors = [{ name = "Peter Huggy", email = "peter.huggy@gmail.com" }]
requires-python = ">=3.13"
readme = "README.md"
dependencies = [
    "django~=5.2",
    "django-debug-toolbar>=5.0.1,<6",
    "django-environ>=0.12.0,<0.13",
    "djangorestframework>=3.15.2,<4",
    "pillow>=11.1.0,<12",
    "psycopg2-binary>=2.9.10,<3",

    "pytest>=8.3.5,<9",
    "pytest-django>=4.11.1,<5",
    "django-stubs>=5.2,<5.3",
    "mypy>=1.15.0,<2",
    "ruff>=0.11.8,<0.12",
]

[tool.mypy]
plugins = ["mypy_django_plugin.main"]

[tool.django-stubs]
django_settings_module = "core.settings"

[tool.uv]
package = false

[tool.ruff]
fix = true
line-length = 120

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN401",  # dynamically typed expressions (typing.Any) are disallowed in `{}`
    "COM812",  # trailing comma missing
    "D1",  # missing docstring in ...
    "D203",  # 1 blank line required before class docstring
    "D213",  # multi-line docstring summary should start at the second line
    "DJ007",  # do not use `__all__` with `ModelForm`, use `fields` instead
    "DTZ001",  # the use of `datetime.datetime()` without `tzinfo` argument is not allowed
    "E501",  # line too long ({} > {})
    "EM",  # exception must not use a ...
    "FA",  # required future annotation
    "FBT",  # boolean type position ...
    "G004",  # using of f-strings to format logging messages
    "ISC001",  # implicitly concatenated string literals on one line
    "TRY003"  # avoid specifying long messages outside the exception class
]

[tool.ruff.lint.isort]
lines-after-imports = 2
known-local-folder = ["apps", "core"]
known-third-party = []
no-lines-before = ["standard-library", "local-folder"]

[tool.ruff.lint.per-file-ignores]
"*/management/*" = [
    "ANN",  # flake8-annotations
]
"*/migrations/*" = [
    "ANN",  # flake8-annotations
    "Q000",  # double quotes are prefferable
    "RUF012"  # mutable class atributes should be annotated with `typing.ClassVar`
]
"*/tests/*.py" = [
    "PLR2004",  # magic value used in comparison, consider replacing {} with constant variable
    "S101",  # use of `assert` detected
    "S106",  # hardcoded-password-func-arg
    "S311"  # standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.coverage.report]
exclude_also = ["if typing.TYPE_CHECKING:"]
